<?php

class AdminInterfaceLocales_Controller extends Admin_Controller 
{
	public function index()
	{
		//if(!ini_get('safe_mode')){ set_time_limit(60000); }
		$autogenerated_keyword = '### AUTOGENERATED ###';
		
		$this->interface_locale_codes = array('bg');
		foreach($this->language_locales as $code => $info)
		{
			if($code != $this->interface_locale_codes[0]){ $this->interface_locale_codes[] = $code; }
		}
		
		$this->interface_locales = array();
		
		if(is_post())
		{
			$datetime = strftime('%Y-%m-%d.%H.%M.%S');
			
			$post_data = $_POST['interface_locales'];
			array_walk_recursive($post_data, function(&$item, $key)
			{
				if(in_array($key, array('YES', 'NO')) || in_array($item, array('+', '-')))
				{
					$item = "'$item'"; 
				}
			});
			
			foreach($this->language_locales as $code => $info)
			{
				$file_path = SystemConfig::$localesPath.$code.'/_globals.yaml';
				$file = explode($autogenerated_keyword, file_get_contents($file_path));
				
				$cnt = $file[0]."### AUTOGENERATED ###\n\n".Spyc::YAMLDump($post_data[$code], 2, 0);
				rename($file_path, SystemConfig::$localesPath."$code/_globals.$datetime.yaml");
				$handle = fopen($file_path, 'w');
				fwrite($handle, $cnt);
				fclose($handle);
				//file_put_contents($file_path, $cnt, FILE_TEXT);
			}
		}
		
		$this->interface_sections = array();
		foreach($this->interface_locale_codes as $code)
		{
			$file = explode($autogenerated_keyword, file_get_contents(SystemConfig::$localesPath.$code.'/_globals.yaml'));
			$file = Spyc::YAMLLoad($file[1]);
			$this->interface_sections || $this->get_sections($file);
			
			$this->multidimensional_to_linear($file);
			$this->interface_locales[$code] = $this->_multidimensional_array;
			$this->_multidimensional_array = array();
		}
	}
	
	protected function get_sections($data)
	{
		foreach($data as $k => $d)
		{
			if(is_array($d))
			{
				$this->interface_sections[$k] = 1;
			}
		}
	}
	
	protected $_multidimensional_array;
	protected function multidimensional_to_linear($data, $var = '', $path = '')
	{
		if(is_array($data))
		{
			foreach($data as $var => $_data)
			{
				if(in_array($var, array('+', '-')))
				{
					$var = "'$var'"; 
				}
				$this->multidimensional_to_linear($_data, $var, "{$path}[{$var}]");
			}
		}
		else
		{
			$this->_multidimensional_array[$path] = $data;
		}
	}
	
	public static function actions(){ return array('listing' => 'index'); }
}

?>
